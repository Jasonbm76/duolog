{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(npm install:*)",
      "Bash(supabase init:*)",
      "Bash(supabase start:*)",
      "Bash(supabase stop:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f supabase/migrations/20250113_create_early_access_table.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -f supabase/migrations/20250113_create_early_access_table.sql)",
      "Bash(rg:*)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(curl:*)",
      "Bash(npx tsc:*)",
      "Bash(pkill:*)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(killall:*)",
      "Bash(grep:*)",
      "mcp__ide__getDiagnostics",
      "Bash(touch:*)",
      "Bash(npx supabase db push:*)",
      "Bash(psql:*)",
      "Bash(open:*)",
      "Bash(chmod:*)",
      "Bash(ls:*)",
      "Bash(./scripts/db-safety.sh:*)",
      "Bash(NODE_ENV=production ./scripts/db-safety.sh)",
      "Bash(node:*)",
      "Bash(NODE_ENV=production node -e \"console.log('Testing production block...'); if (process.env.NODE_ENV === 'production') { console.log('‚ùå PRODUCTION DETECTED - Would block destructive operations'); process.exit(1); }\")",
      "Bash(PGPASSWORD=postgres psql -h 127.0.0.1 -p 64322 -U postgres -d postgres -c \"SELECT id, user_identifier, conversation_count, daily_limit, updated_at FROM usage_tracking ORDER BY updated_at DESC;\")",
      "Bash(true)",
      "Bash(rm:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f supabase/migrations/002_add_email_usage_tracking.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -c \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -f /Users/jasonmurphy/Repos/duolog/supabase/migrations/003_add_email_verification.sql)",
      "Bash(echo:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -c \"\\\\df can_send_verification\")",
      "Bash(supabase status:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -f /Users/jasonmurphy/Repos/duolog/supabase/migrations/003_add_email_verification.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -f /Users/jasonmurphy/Repos/duolog/supabase/migrations/002_add_email_usage_tracking.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -c \"SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -c \"\\\\d user_usage\")",
      "Bash(npx supabase:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -f supabase/migrations/004_add_admin_sessions.sql)",
      "Bash(supabase db push:*)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -c \"\\df get_daily_conversation_counts\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 54322 -U postgres -d postgres -c \"SELECT * FROM get_daily_conversation_counts(7);\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -c \"\\df get_daily_conversation_counts\")",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -f /Users/jasonmurphy/Repos/duolog/supabase/migrations/004_add_conversation_tracking.sql)",
      "Bash(PGPASSWORD=postgres psql -h localhost -p 64322 -U postgres -d postgres -c \"INSERT INTO conversation_history (email, started_at) VALUES \n('test@example.com', NOW() - INTERVAL '1 day'),\n('test2@example.com', NOW() - INTERVAL '2 days'),\n('test3@example.com', NOW());\")",
      "Bash(supabase migration list:*)",
      "Bash(supabase migration up:*)",
      "Bash(supabase db remote commit:*)",
      "Bash(supabase db diff:*)",
      "Bash(git checkout:*)"
    ],
    "deny": []
  }
}